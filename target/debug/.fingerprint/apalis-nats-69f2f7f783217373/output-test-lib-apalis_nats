{"$message_type":"diagnostic","message":"unresolved import `tower`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":158,"byte_end":163,"line_start":6,"line_end":6,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use tower::{Layer, Service};","highlight_start":5,"highlight_end":10}],"label":"use of unresolved module or unlinked crate `tower`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you wanted to use a crate named `tower`, use `cargo add tower` to add it to your `Cargo.toml`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `tower`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/apalis-nats/src/ack_layer.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tower::{Layer, Service};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of unresolved module or unlinked crate `tower`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: if you wanted to use a crate named `tower`, use `cargo add tower` to add it to your `Cargo.toml`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":633,"byte_end":646,"line_start":28,"line_end":28,"column_start":36,"column_end":49,"is_primary":true,"text":[{"text":"    fn layer(&self, service: S) -> Self::Service {","highlight_start":36,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":633,"byte_end":639,"line_start":28,"line_end":28,"column_start":36,"column_end":42,"is_primary":true,"text":[{"text":"    fn layer(&self, service: S) -> Self::Service {","highlight_start":36,"highlight_end":42}],"label":null,"suggested_replacement":"<NatsAckLayer as WorkerFactoryFn>::","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/apalis-nats/src/ack_layer.rs:28:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn layer(&self, service: S) -> Self::Service {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn layer(&self, service: S) -> \u001b[0m\u001b[0m\u001b[38;5;9mSelf::\u001b[0m\u001b[0mService {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn layer(&self, service: S) -> \u001b[0m\u001b[0m\u001b[38;5;10m<NatsAckLayer as WorkerFactoryFn>::\u001b[0m\u001b[0mService {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1391,"byte_end":1402,"line_start":56,"line_end":56,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1391,"byte_end":1397,"line_start":56,"line_end":56,"column_start":71,"column_end":77,"is_primary":true,"text":[{"text":"    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","highlight_start":71,"highlight_end":77}],"label":null,"suggested_replacement":"<NatsAckService<S> as TryFrom>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1391,"byte_end":1397,"line_start":56,"line_end":56,"column_start":71,"column_end":77,"is_primary":true,"text":[{"text":"    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","highlight_start":71,"highlight_end":77}],"label":null,"suggested_replacement":"<NatsAckService<S> as TryFuture>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1391,"byte_end":1397,"line_start":56,"line_end":56,"column_start":71,"column_end":77,"is_primary":true,"text":[{"text":"    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","highlight_start":71,"highlight_end":77}],"label":null,"suggested_replacement":"<NatsAckService<S> as TryInto>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1391,"byte_end":1397,"line_start":56,"line_end":56,"column_start":71,"column_end":77,"is_primary":true,"text":[{"text":"    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","highlight_start":71,"highlight_end":77}],"label":null,"suggested_replacement":"<NatsAckService<S> as TryStream>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1391,"byte_end":1397,"line_start":56,"line_end":56,"column_start":71,"column_end":77,"is_primary":true,"text":[{"text":"    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","highlight_start":71,"highlight_end":77}],"label":null,"suggested_replacement":"<NatsAckService<S> as hyper::service::HttpService>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1391,"byte_end":1397,"line_start":56,"line_end":56,"column_start":71,"column_end":77,"is_primary":true,"text":[{"text":"    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","highlight_start":71,"highlight_end":77}],"label":null,"suggested_replacement":"<NatsAckService<S> as hyper_util::client::legacy::connect::dns::sealed::Resolve>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1391,"byte_end":1397,"line_start":56,"line_end":56,"column_start":71,"column_end":77,"is_primary":true,"text":[{"text":"    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","highlight_start":71,"highlight_end":77}],"label":null,"suggested_replacement":"<NatsAckService<S> as hyper_util::client::legacy::connect::sealed::ConnectSvc>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1391,"byte_end":1397,"line_start":56,"line_end":56,"column_start":71,"column_end":77,"is_primary":true,"text":[{"text":"    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {","highlight_start":71,"highlight_end":77}],"label":null,"suggested_replacement":"<NatsAckService<S> as rand_core::TryRngCore>::","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/apalis-nats/src/ack_layer.rs:56:71\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), \u001b[0m\u001b[0m\u001b[38;5;9mSelf::\u001b[0m\u001b[0mError>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<NatsAckService<S> as TryFrom>::\u001b[0m\u001b[0mError>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), \u001b[0m\u001b[0m\u001b[38;5;9mSelf::\u001b[0m\u001b[0mError>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<NatsAckService<S> as TryFuture>::\u001b[0m\u001b[0mError>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), \u001b[0m\u001b[0m\u001b[38;5;9mSelf::\u001b[0m\u001b[0mError>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<NatsAckService<S> as TryInto>::\u001b[0m\u001b[0mError>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), \u001b[0m\u001b[0m\u001b[38;5;9mSelf::\u001b[0m\u001b[0mError>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn poll_ready(&mut self, cx: &mut Context<'_>) -> Poll<Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<NatsAckService<S> as TryStream>::\u001b[0m\u001b[0mError>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     and 4 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1504,"byte_end":1516,"line_start":60,"line_end":60,"column_start":57,"column_end":69,"is_primary":true,"text":[{"text":"    fn call(&mut self, req: Request<T, NatsContext>) -> Self::Future {","highlight_start":57,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1504,"byte_end":1510,"line_start":60,"line_end":60,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"    fn call(&mut self, req: Request<T, NatsContext>) -> Self::Future {","highlight_start":57,"highlight_end":63}],"label":null,"suggested_replacement":"<NatsAckService<S> as hyper::service::HttpService>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1504,"byte_end":1510,"line_start":60,"line_end":60,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"    fn call(&mut self, req: Request<T, NatsContext>) -> Self::Future {","highlight_start":57,"highlight_end":63}],"label":null,"suggested_replacement":"<NatsAckService<S> as hyper_util::client::legacy::connect::dns::sealed::Resolve>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1504,"byte_end":1510,"line_start":60,"line_end":60,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"    fn call(&mut self, req: Request<T, NatsContext>) -> Self::Future {","highlight_start":57,"highlight_end":63}],"label":null,"suggested_replacement":"<NatsAckService<S> as hyper_util::client::legacy::connect::sealed::ConnectSvc>::","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"packages/apalis-nats/src/ack_layer.rs","byte_start":1504,"byte_end":1510,"line_start":60,"line_end":60,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"    fn call(&mut self, req: Request<T, NatsContext>) -> Self::Future {","highlight_start":57,"highlight_end":63}],"label":null,"suggested_replacement":"<NatsAckService<S> as tryhard::on_retry::OnRetry>::","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/apalis-nats/src/ack_layer.rs:60:57\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn call(&mut self, req: Request<T, NatsContext>) -> Self::Future {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn call(&mut self, req: Request<T, NatsContext>) -> \u001b[0m\u001b[0m\u001b[38;5;9mSelf::\u001b[0m\u001b[0mFuture {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn call(&mut self, req: Request<T, NatsContext>) -> \u001b[0m\u001b[0m\u001b[38;5;10m<NatsAckService<S> as hyper::service::HttpService>::\u001b[0m\u001b[0mFuture {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn call(&mut self, req: Request<T, NatsContext>) -> \u001b[0m\u001b[0m\u001b[38;5;9mSelf::\u001b[0m\u001b[0mFuture {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn call(&mut self, req: Request<T, NatsContext>) -> \u001b[0m\u001b[0m\u001b[38;5;10m<NatsAckService<S> as hyper_util::client::legacy::connect::dns::sealed::Resolve>::\u001b[0m\u001b[0mFuture {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn call(&mut self, req: Request<T, NatsContext>) -> \u001b[0m\u001b[0m\u001b[38;5;9mSelf::\u001b[0m\u001b[0mFuture {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn call(&mut self, req: Request<T, NatsContext>) -> \u001b[0m\u001b[0m\u001b[38;5;10m<NatsAckService<S> as hyper_util::client::legacy::connect::sealed::ConnectSvc>::\u001b[0m\u001b[0mFuture {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    fn call(&mut self, req: Request<T, NatsContext>) -> \u001b[0m\u001b[0m\u001b[38;5;9mSelf::\u001b[0m\u001b[0mFuture {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn call(&mut self, req: Request<T, NatsContext>) -> \u001b[0m\u001b[0m\u001b[38;5;10m<NatsAckService<S> as tryhard::on_retry::OnRetry>::\u001b[0m\u001b[0mFuture {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"packages/apalis-nats/src/expose.rs","byte_start":2867,"byte_end":2877,"line_start":81,"line_end":81,"column_start":23,"column_end":33,"is_primary":true,"text":[{"text":"            if let Ok(mut stream) = self.jetstream.get_stream(stream_name).await {","highlight_start":23,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"packages/apalis-nats/src/expose.rs","byte_start":2867,"byte_end":2871,"line_start":81,"line_end":81,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"            if let Ok(mut stream) = self.jetstream.get_stream(stream_name).await {","highlight_start":23,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/apalis-nats/src/expose.rs:81:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Ok(mut stream) = self.jetstream.get_stream(stream_name).await {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"packages/apalis-nats/src/storage.rs","byte_start":10461,"byte_end":10472,"line_start":324,"line_end":324,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let mut headers = HeaderMap::new();","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"packages/apalis-nats/src/storage.rs","byte_start":10461,"byte_end":10465,"line_start":324,"line_end":324,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut headers = HeaderMap::new();","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpackages/apalis-nats/src/storage.rs:324:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut headers = HeaderMap::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0223, E0432.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0223, E0432.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0223`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0223`.\u001b[0m\n"}
